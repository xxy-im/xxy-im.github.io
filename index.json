[{"categories":["Linux"],"content":"前几天装了WSL，身为多年的伪Vim粉VS Code宇宙第一决定顺便把Vim给搞搞 本来是打算就用原生Vim然后堆plug的，但是既然已经折腾了，就不差这一下了。 ","date":"2021-02-18","objectID":"/neovim/:0:0","tags":["Vim","Linux"],"title":"Ubuntu下安装Neovim+SpaceVim","uri":"/neovim/"},{"categories":["Linux"],"content":"安装Neovim 因为太久没玩过Ubuntu了，所以上来就是sudo apt install neovim，然后报Error，提示 Unable to locate package neovim 进Neovim官网看了下安装教程，在Ubuntu那一栏可以看到，从18.04开始可以通过PPA来安装了，照着官方教程一顿梭 sudo add-apt-repository ppa:neovim-ppa/stable sudo apt-get update sudo apt-get install neovim 老版本的Ubuntu可能需要先安装PPA sudo apt-get install software-properties-common 安装完后可以输入nvim 打开，当然可以修改下alias，通过vi打开nvim 这里我选择软连接的方式将vi连接到nvim，因为现在wsl系统里的vi和vim命令就是软连接文件，所以我想删掉现在的vi，然后重新软连接到nvim 先which vi 找到vi的目录， 比如我的系统中vi文件的目录是/usr/bin/ 再输入ls -il 可以看到vi是个连接文件，指向 /etc/alternatives/vi 然后这里我把两个软连接给删掉再建立新的软连接 sudo rm -rf /usr/bin/vi sudo rm -rf /usr/bin/vim sudo ln -s /usr/bin/nvim /usr/bin/vi sudo ln -s /usr/bin/nvim /usr/bin/vim 这时候再输入vi/vim就可以打开nvim了 Neovim点击放大 \" Neovim ","date":"2021-02-18","objectID":"/neovim/:1:0","tags":["Vim","Linux"],"title":"Ubuntu下安装Neovim+SpaceVim","uri":"/neovim/"},{"categories":["Linux"],"content":"安装SpaceVim SpaceVim是一个开源的模块化配置集合，可以通过它很方便的打造出适用于各种开发场景的IDE。 curl -sLf https://spacevim.org/cn/install.sh | bash 安装SpaceVim点击放大 \" 安装SpaceVim 字体安装报错点击放大 \" 字体安装报错 提示安装完成，打开vim却没有加载出SpaceVim，不知道哪里出现问题，往上翻也只看到几个字体安装的报错，感觉应该是和WSL环境的配置文件有关系，但还是先在网上找了那几个字体报错的解决方法 # 使mkfontscale和mkfontdir命令正常运行 sudo apt-get install ttf-mscorefonts-installer # 使fc-cache命令正常运行 sudo apt-get install fontconfig 然后再安装试试 结果还真是字体的问题，重装下就好了… SpaceVim点击放大 \" SpaceVim Normal模式下:SPUpdate 更新所有插件，:SPUpdate SpaceVim可以更新自身 更新所有插件点击放大 \" 更新所有插件 再次打开vim又 vimproc’s DLL报错，直接:VimProcInstall 或者make一下 cd ~/.SpaceVim/bundle/vimproc.vim/ make 有些icon显示不出来，只有个小方框，有可能是因为字体的问题 可以使用fc-list命令查看ubuntu中安装的字体 SpaceVim默认使用SourceCodePro Nerd Font Mono字体 安装Nerd Font wget -c https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/SourceCodePro.zip sudo unzip SourceCodePro -d /usr/share/fonts/SourceCodePro cd /usr/share/fonts/SourceCodePro sudo mkfontscale # 生成核心字体信息 sudo mkfontdir # 生成字体文件夹 sudo fc-cache -fv # 刷新系统字体缓存 如果使用终端的话需要修改终端的配置 比如我用的是Windows Terminal 在Windows下安装完SourceCodePro Nerd Font Mono字体后需要在Windows Terminal配置文件WSL配置下加上 \"fontFace\": \"SauceCodePro Nerd Font\" 注意第一个f小写，然后再重启终端就能看到图标都出来了 更新字体后点击放大 \" 更新字体后 ","date":"2021-02-18","objectID":"/neovim/:2:0","tags":["Vim","Linux"],"title":"Ubuntu下安装Neovim+SpaceVim","uri":"/neovim/"},{"categories":["Linux"],"content":"一些简单的配置 ","date":"2021-02-18","objectID":"/neovim/:3:0","tags":["Vim","Linux"],"title":"Ubuntu下安装Neovim+SpaceVim","uri":"/neovim/"},{"categories":["Linux"],"content":"相对行号 看不习惯相对行号，在配置文件中取消 relativenumber = false ","date":"2021-02-18","objectID":"/neovim/:3:1","tags":["Vim","Linux"],"title":"Ubuntu下安装Neovim+SpaceVim","uri":"/neovim/"},{"categories":["Linux"],"content":"主题 打开~/.SpaceVim.d/init.toml 主题选择 SpaceVim colorscheme = \"SpaceVim\" SpaceVim主题点击放大 \" SpaceVim主题 ","date":"2021-02-18","objectID":"/neovim/:3:2","tags":["Vim","Linux"],"title":"Ubuntu下安装Neovim+SpaceVim","uri":"/neovim/"},{"categories":["Linux"],"content":"C++ 打开vim，空格 + f + v + d (一个个按)，快捷键打开配置文件，空格(space)为自定义快捷键的前缀，按下空格后可以看到所有的自定义快捷键 按照官方配置把需要的加上去就可以了 像clangd，clang这些如果需要的话要先装好才能配置成功，不然vim会报clangd is not executable 直接apt安装的clang貌似版本会有点低，所以建议用官方源 bash -c \"$(wget -O - https://apt.llvm.org/llvm.sh)\" 在/usr/bin 目录下找到你的clangd安装目录，比如我的是/usr/bin/clangd-11 再执行下面命令 sudo update-alternatives --install /usr/bin/clangd clangd /usr/bin/clangd-11 100 SpaceVim默认使用的补全插件是deoplete，愿意折腾的同学也可以改成YCM，注意兼容问题 最后在cpp文件中使用SPC + l + r就可以run代码了 修改编译命令可参考Custom Task ","date":"2021-02-18","objectID":"/neovim/:3:3","tags":["Vim","Linux"],"title":"Ubuntu下安装Neovim+SpaceVim","uri":"/neovim/"},{"categories":["Linux"],"content":"Python 官方文档 ","date":"2021-02-18","objectID":"/neovim/:3:4","tags":["Vim","Linux"],"title":"Ubuntu下安装Neovim+SpaceVim","uri":"/neovim/"},{"categories":["Linux"],"content":"小结 其实VS Code + Remote一套用起来才更虚服。 所以上面这些都是瞎折腾，桌面党还是继续老老实实用VS Code ","date":"2021-02-18","objectID":"/neovim/:4:0","tags":["Vim","Linux"],"title":"Ubuntu下安装Neovim+SpaceVim","uri":"/neovim/"},{"categories":["Linux"],"content":"最近需要在Linux下跑写些小程序，但是平时更多时候都离不开Windows打游戏。所以打算使用Win下的Linux子系统 ","date":"2021-02-09","objectID":"/wsl/:0:0","tags":["WSL","Linux"],"title":"Windows下运行Linux的正确姿势","uri":"/wsl/"},{"categories":["Linux"],"content":"启动WSL功能 首先在控制面板的打开或启动Windows程序中将Linux子系统功能勾选上，点确认后会提示重启计算机 控制面板-\u003e程序-\u003e启动或关闭Windows功能点击放大 \" 控制面板-程序-启动或关闭Windows功能 ","date":"2021-02-09","objectID":"/wsl/:1:0","tags":["WSL","Linux"],"title":"Windows下运行Linux的正确姿势","uri":"/wsl/"},{"categories":["Linux"],"content":"安装Linux子系统 这里我选择了一个最方便直接的方法，在Windows商店下载安装，直接在商店搜索WSL，Ubuntu，或者Linux就能找到，比如我安装的是Ubuntu 20.04 安装Ubuntu子系统点击放大 \" 安装Ubuntu子系统 安装完成打开后输入用户名密码就可以使用了。 现在最新的WSL2是可以支持GPU的，所有一些跑Deep的小伙伴可以试试，可以在Windows命令行中输入如下命令查看当前的WSL版本，因为我不需要用到子系统的GPU，所有我没有升级到WSL2，有需要的可以自行找下教程 wsl --list -v 如果没有Windows商店没有满足你要求的Linux子系统，网上貌似也有教程教你运行各种不同的Linux子系统。 ","date":"2021-02-09","objectID":"/wsl/:2:0","tags":["WSL","Linux"],"title":"Windows下运行Linux的正确姿势","uri":"/wsl/"},{"categories":["Linux"],"content":"文件共享 ","date":"2021-02-09","objectID":"/wsl/:3:0","tags":["WSL","Linux"],"title":"Windows下运行Linux的正确姿势","uri":"/wsl/"},{"categories":["Linux"],"content":"子系统访问Windows 在子系统的bash中cd /mnt可以看到Windows下的磁盘已经被挂载到子系统下，可以直接copy需要的文件到子系统中 ","date":"2021-02-09","objectID":"/wsl/:3:1","tags":["WSL","Linux"],"title":"Windows下运行Linux的正确姿势","uri":"/wsl/"},{"categories":["Linux"],"content":"Windows访问子系统文件 子系统的磁盘空间对应Windows下的存储目录默认是在C:\\Users\\用户名\\AppData\\Local\\Packages\\CanonicalGroupLimited.Ubuntu20.04onWindows_79rhkp1fndgsc(这里改为自己的目录)\\LocalState\\rootfs ","date":"2021-02-09","objectID":"/wsl/:3:2","tags":["WSL","Linux"],"title":"Windows下运行Linux的正确姿势","uri":"/wsl/"},{"categories":["Linux"],"content":"关于子系统桌面安装 这部分没内容，因为我并不推荐为Linux子系统安装桌面环境。 ","date":"2021-02-09","objectID":"/wsl/:4:0","tags":["WSL","Linux"],"title":"Windows下运行Linux的正确姿势","uri":"/wsl/"},{"categories":["Linux"],"content":"小结 后续使用过程中当然还会遇到许多坑，毕竟还有很多地方不成熟，比如使用ssh的时候可能会有端口占用问题，Windows访问子系统的权限问题等等。但是相对虚拟机来说，确实方便和实用许多，从系统功能完整性来说，个人认为是在虚拟机之下，Cygwin之上，毕竟Cygwin只是假装自己是个Linux，而WSL是实实在在的用Windows API实现Linux，对于用户层来说就是是实在在的Linux。 ","date":"2021-02-09","objectID":"/wsl/:5:0","tags":["WSL","Linux"],"title":"Windows下运行Linux的正确姿势","uri":"/wsl/"}]